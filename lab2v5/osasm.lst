


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, Fixed Scheduler, 8/10/14
    6 00000000         
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NodePt      ; linked list of tr
                                                            eads to run
   15 00000000         ;EXTERN killSwitch  ; PendSV skip saving the conteext?
   16 00000000         ;EXTERN  SNodePt
   17 00000000         ;EXTERN PeriodicNode
   18 00000000         ;EXTERN  sys
   19 00000000                 EXPORT           OS_Launch
   20 00000000                 EXPORT           SysTick_Handler
   21 00000000                 EXPORT           PendSV_Handler
   22 00000000         ;EXPORT  Timer0A_Handler
   23 00000000         
   24 00000000 40030024 
                       TIMER0_ICR_R
                               EQU              0x40030024
   25 00000000 00000001 
                       TIMER_ICR_TATOCINT
                               EQU              0x00000001  ; GPTM TimerA Time-
                                                            Out Raw
   26 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   27 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   28 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   29 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   30 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v



ARM Macro Assembler    Page 2 


                                                            alue (lowest).
   31 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   32 00000000 E000E014 
                       NVIC_ST_RELOAD
                               EQU              0xE000E014
   33 00000000 E000E018 
                       NVIC_ST_CURRENT
                               EQU              0xE000E018
   34 00000000         
   35 00000000         
   36 00000000 4770            BX               LR          ; yes – we successf
                                                            ully incremented it
                                                            
   37 00000002         
   38 00000002         
   39 00000002         OS_Launch
   40 00000002 4829            LDR              R0, =RunPt  ; currently running
                                                             thread
   41 00000004 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   42 00000006 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   43 0000000A E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   44 0000000E BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                             
   45 00000010 F85D CB04       POP              {R12}
   46 00000014 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   47 00000018 F85D EB04       POP              {LR}        ; start location
   48 0000001C BC02            POP              {R1}        ; discard PSR
   49 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   50 00000020 4770            BX               LR          ; start first threa
                                                            d
   51 00000022         
   52 00000022         OSStartHang
   53 00000022 E7FE            B                OSStartHang ; Should never get 
                                                            here
   54 00000024         
   55 00000024         
   56 00000024         
   57 00000024         ;*******************************************************
                       *************************************************
   58 00000024         
   59 00000024         
   60 00000024         SysTick_Handler
   61 00000024 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   62 00000026 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
   63 0000002A 481F            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread



ARM Macro Assembler    Page 3 


   64 0000002C 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
   65 0000002E F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
   66 00000032         ;context saved
   67 00000032         ;update the sleep numbers
   68 00000032 E018            B                SleepUpdate
   69 00000034         
   70 00000034         SleepCheck
   71 00000034 481C            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   72 00000036 491D            LDR              R1, =NodePt
   73 00000038 680A            LDR              R2, [R1]    ; NodePt
   74 0000003A 6812            LDR              R2, [R2]    ; next to run
   75 0000003C         
   76 0000003C 600A            STR              R2, [R1]    ; NodePt= NodePt->N
                                                            ext;
   77 0000003E 6853            LDR              R3, [R2,#4] ; RunPt = &sys[Node
                                                            Pt->Thread];// whic
                                                            h thread
   78 00000040 6003            STR              R3, [R0]
   79 00000042         
   80 00000042 68D3            LDR              R3, [R2,#12] 
                                                            ; NodePt->TimeSlice
                                                            
   81 00000044 3B01            SUBS             R3, #1      ; check sleep time 
                                                            to run this ISR, su
                                                            btract 1.
   82 00000046         
   83 00000046 D5F5            BPL              SleepCheck  ;  Positive or Zero
                                                            , skip over this Th
                                                            read (Sleeptime of 
                                                            0 will be -1 here)
   84 00000048         
   85 00000048         ; reload SYStiCK Reload time
   86 00000048 680A            LDR              R2, [R1]    ;
   87 0000004A 6892            LDR              R2, [R2,#8] ; NodePt->TimeSlice
                                                            
   88 0000004C F1A2 0232       SUB              R2, #50     ; subtract off time
                                                             to run this ISR
   89 00000050 4917            LDR              R1, =NVIC_ST_RELOAD
   90 00000052         ; STR     R2, [R1]           ; how long to run next thre
                       ad
   91 00000052 4918            LDR              R1, =NVIC_ST_CURRENT
   92 00000054 600A            STR              R2, [R1]    ; write to current,
                                                             clears it
   93 00000056         
   94 00000056 4914            LDR              R1, =RunPt
   95 00000058 680B            LDR              R3, [R1]    ; R2 = RunPt
   96 0000005A         ;LDR     R3, [R2]        ;  R3 = RunPt->StackPt
   97 0000005A F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   98 0000005E         
   99 0000005E         
  100 0000005E         
  101 0000005E E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 



ARM Macro Assembler    Page 4 


  102 00000062         
  103 00000062 B662            CPSIE            I           ; tasks run with I=
                                                            0
  104 00000064 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  105 00000066         
  106 00000066         
  107 00000066         
  108 00000066         SleepUpdate
  109 00000066         ;updates each sleep number until r2 = r1 NodePt Addr
  110 00000066 4811            LDR              R0, =NodePt
  111 00000068 6800            LDR              R0, [R0]    ; R0 = NodePt
  112 0000006A 6800            LDR              R0, [R0]    ; R0 = NodePt->Next
                                                            
  113 0000006C F100 0100       ADD              R1, R0, #0  ; R1 = (NodePt->Nex
                                                            t)->()->
  114 00000070         
  115 00000070         SleepUpdateLoop
  116 00000070 68CB            LDR              R3, [R1,#12] ; R3 = NodePt->Sle
                                                            ep
  117 00000072 3B01            SUBS             R3, #1      ; subtract from the
                                                             TimeSlice
  118 00000074 D400            BMI              Awake       ; Negative Number m
                                                            eans the sleep was 
                                                            at 0, and was not s
                                                            leeping
  119 00000076 60CB            STR              R3, [R1,#12] ; Sleeping so stor
                                                            e the sleep back in
                                                             the memory locatio
                                                            n
  120 00000078         
  121 00000078         Awake
  122 00000078 6809            LDR              R1, [R1]    ; R1 = NodePt->Next
                                                            
  123 0000007A 4281            CMP              R1, R0      ; Did we make a ful
                                                            l loop around the T
                                                            CBs?
  124 0000007C D1F8            BNE              SleepUpdateLoop ; not same, con
                                                            tinue
  125 0000007E E7D9            B                SleepCheck
  126 00000080         
  127 00000080         PendSV_Handler
  128 00000080 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  129 00000082 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
  130 00000086 4808            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
  131 00000088 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
  132 0000008A F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
  133 0000008E         ;LDR     R1, =sys           ; each sys[] is 400 bytes
  134 0000008E         ;ADD     R1,#3*400          ; pointer to sys[3] = ThePan
                        (background task)
  135 0000008E         



ARM Macro Assembler    Page 5 


  136 0000008E         ;switch RunPt = NodePt->next->ThreadPt
  137 0000008E 4907            LDR              R1, =NodePt ;R1 = nodePt addr
  138 00000090 680A            LDR              R2, [R1]    ;R2 = NodePt val
  139 00000092 6812            LDR              R2, [R2]    ;R3 = NodePt->next
  140 00000094 6853            LDR              R3, [R2,#4] ;R1 = NodePt->next-
                                                            >ThreadPt
  141 00000096 6003            STR              R3, [R0]    ; RunPt = NodePt->n
                                                            ext->ThreadPt
  142 00000098         
  143 00000098         ;switch the NodePt= NodePt->next
  144 00000098 600A            STR              R2, [R1]
  145 0000009A         
  146 0000009A         
  147 0000009A F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  148 0000009E E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  149 000000A2         
  150 000000A2 B662            CPSIE            I           ; tasks run with I=
                                                            0
  151 000000A4 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  152 000000A6         
  153 000000A6 00 00           ALIGN
  154 000000A8                 END
              00000000 
              00000000 
              E000E014 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file osasm.s
   Uses
      None
Comment: .text unused
Awake 00000078

Symbol: Awake
   Definitions
      At line 121 in file osasm.s
   Uses
      At line 118 in file osasm.s
Comment: Awake used once
OSStartHang 00000022

Symbol: OSStartHang
   Definitions
      At line 52 in file osasm.s
   Uses
      At line 53 in file osasm.s
Comment: OSStartHang used once
OS_Launch 00000002

Symbol: OS_Launch
   Definitions
      At line 39 in file osasm.s
   Uses
      At line 19 in file osasm.s
Comment: OS_Launch used once
PendSV_Handler 00000080

Symbol: PendSV_Handler
   Definitions
      At line 127 in file osasm.s
   Uses
      At line 21 in file osasm.s
Comment: PendSV_Handler used once
SleepCheck 00000034

Symbol: SleepCheck
   Definitions
      At line 70 in file osasm.s
   Uses
      At line 83 in file osasm.s
      At line 125 in file osasm.s

SleepUpdate 00000066

Symbol: SleepUpdate
   Definitions
      At line 108 in file osasm.s
   Uses
      At line 68 in file osasm.s
Comment: SleepUpdate used once
SleepUpdateLoop 00000070




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: SleepUpdateLoop
   Definitions
      At line 115 in file osasm.s
   Uses
      At line 124 in file osasm.s
Comment: SleepUpdateLoop used once
SysTick_Handler 00000024

Symbol: SysTick_Handler
   Definitions
      At line 60 in file osasm.s
   Uses
      At line 20 in file osasm.s
Comment: SysTick_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 26 in file osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 29 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 30 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 31 in file osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_ST_CURRENT E000E018

Symbol: NVIC_ST_CURRENT
   Definitions
      At line 33 in file osasm.s
   Uses
      At line 91 in file osasm.s
Comment: NVIC_ST_CURRENT used once
NVIC_ST_RELOAD E000E014

Symbol: NVIC_ST_RELOAD
   Definitions
      At line 32 in file osasm.s
   Uses
      At line 89 in file osasm.s
Comment: NVIC_ST_RELOAD used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 27 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 28 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
TIMER0_ICR_R 40030024

Symbol: TIMER0_ICR_R
   Definitions
      At line 24 in file osasm.s
   Uses
      None
Comment: TIMER0_ICR_R unused
TIMER_ICR_TATOCINT 00000001

Symbol: TIMER_ICR_TATOCINT
   Definitions
      At line 25 in file osasm.s
   Uses
      None
Comment: TIMER_ICR_TATOCINT unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NodePt 00000000

Symbol: NodePt
   Definitions
      At line 14 in file osasm.s
   Uses
      At line 72 in file osasm.s
      At line 110 in file osasm.s
      At line 137 in file osasm.s

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file osasm.s
   Uses
      At line 40 in file osasm.s
      At line 63 in file osasm.s
      At line 71 in file osasm.s
      At line 94 in file osasm.s
      At line 130 in file osasm.s

2 symbols
354 symbols in table
