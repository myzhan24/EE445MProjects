


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, Fixed Scheduler, 8/10/14
    6 00000000         
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NodePt      ; linked list of tr
                                                            eads to run
   15 00000000                 EXTERN           head
   16 00000000         
   17 00000000                 EXTERN           OS_SleepCheck ;
   18 00000000                 EXTERN           OS_SleepClear
   19 00000000                 EXTERN           OS_RemoveCurrentThread ;removes
                                                             the thread from th
                                                            e tcb linked list
   20 00000000         ;EXTERN killSwitch  ; PendSV skip saving the conteext?
   21 00000000         ;EXTERN  SNodePt
   22 00000000         ;EXTERN PeriodicNode
   23 00000000         ;EXTERN  sys
   24 00000000                 EXPORT           OS_Launch
   25 00000000                 EXPORT           SysTick_Handler
   26 00000000                 EXPORT           PendSV_Handler
   27 00000000         ;EXPORT  Timer0A_Handler
   28 00000000         
   29 00000000 40030024 
                       TIMER0_ICR_R
                               EQU              0x40030024
   30 00000000 00000001 
                       TIMER_ICR_TATOCINT
                               EQU              0x00000001  ; GPTM TimerA Time-
                                                            Out Raw
   31 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   32 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   33 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   34 00000000 000000EF 



ARM Macro Assembler    Page 2 


                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   35 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   36 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   37 00000000 E000E014 
                       NVIC_ST_RELOAD
                               EQU              0xE000E014
   38 00000000 E000E018 
                       NVIC_ST_CURRENT
                               EQU              0xE000E018
   39 00000000         
   40 00000000 40025008 
                       PF1     EQU              0x40025008
   41 00000000 4770            BX               LR          ; yes – we successf
                                                            ully incremented it
                                                            
   42 00000002         
   43 00000002         
   44 00000002         OS_Launch
   45 00000002 494E            LDR              R1, =NVIC_ST_RELOAD
   46 00000004 F1A0 0001       SUB              R0, R0, #1
   47 00000008 6008            STR              R0, [R1]
   48 0000000A 484D            LDR              R0, =head
   49 0000000C 6800            LDR              R0, [R0]
   50 0000000E 4A4D            LDR              R2, =NodePt
   51 00000010 6010            STR              R0, [R2]
   52 00000012 6842            LDR              R2, [R0, #4]
   53 00000014 484C            LDR              R0, =RunPt  ; currently running
                                                             thread
   54 00000016 6002            STR              R2, [R0]
   55 00000018 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   56 0000001A F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   57 0000001E E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   58 00000022 BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                             
   59 00000024 F85D CB04       POP              {R12}
   60 00000028 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   61 0000002C F85D EB04       POP              {LR}        ; start location
   62 00000030 BC02            POP              {R1}        ; discard PSR
   63 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   64 00000034 4770            BX               LR          ; start first threa
                                                            d
   65 00000036         
   66 00000036         OSStartHang



ARM Macro Assembler    Page 3 


   67 00000036 E7FE            B                OSStartHang ; Should never get 
                                                            here
   68 00000038         
   69 00000038         
   70 00000038         
   71 00000038         ;*******************************************************
                       *************************************************
   72 00000038         
   73 00000038         
   74 00000038         SysTick_Handler
   75 00000038 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   76 0000003A         
   77 0000003A         
   78 0000003A         
   79 0000003A         ;testmain7 PF1 toggler for systick time analysis
   80 0000003A         ;LDR  R0, =PF1
   81 0000003A         ;MOV  R1, #2
   82 0000003A         ;STR  R1,[R0]
   83 0000003A         
   84 0000003A         ;1) check marked for deletion
   85 0000003A         
   86 0000003A 4843            LDR              R0, =RunPt
   87 0000003C 6801            LDR              R1, [R0]    ;Run Pt val
   88 0000003E 684A            LDR              R2, [R1,#4] ;RunPt->kill
   89 00000040 3200            ADDS             R2, #0      ;set cc
   90 00000042 D00E            BEQ              sh_SaveContext ;0: alive, 1: de
                                                            lete
   91 00000044         
   92 00000044         ;1) delete thread, do not save context
   93 00000044         sh_DeleteLoop
   94 00000044 B500            PUSH             {LR}
   95 00000046 F7FF FFFE       BL               OS_RemoveCurrentThread ;NodePt 
                                                            = NodePt->Prev
   96 0000004A F85D EB04       POP              {LR}
   97 0000004E 483E            LDR              R0, =RunPt  ;RuntPt = RunPt->Pr
                                                            ev
   98 00000050 6800            LDR              R0, [R0]    ;Old thread was fre
                                                            ed
   99 00000052 F8D0 D000       LDR              SP, [R0]    ;Update Stack Point
                                                            er to RunPt->Prev->
                                                            SP
  100 00000056         
  101 00000056         ;1) check marked for deletion again
  102 00000056 483C            LDR              R0, =RunPt
  103 00000058 6801            LDR              R1, [R0]    ;Run Pt val
  104 0000005A 684A            LDR              R2, [R1,#4] ;RunPt->kill
  105 0000005C 3200            ADDS             R2, #0      ;set cc
  106 0000005E         
  107 0000005E D00E            BEQ              sh_SleepCheckLoop ;0: alive, 1:
                                                             delete.
  108 00000060 E7F0            B                sh_DeleteLoop ;kill = 1,  Loop 
                                                            again, needs deleti
                                                            on
  109 00000062         
  110 00000062         
  111 00000062         ;1) alive thread, save context
  112 00000062         sh_SaveContext



ARM Macro Assembler    Page 4 


  113 00000062 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11
  114 00000066 4838            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
  115 00000068 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
  116 0000006A F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
  117 0000006E         
  118 0000006E         ;sh_NoSaveContext
  119 0000006E         ;2) Find the Next Thread that is not sleeping
  120 0000006E         ;start by setting the nodePt to the head of the priority
                        linked list
  121 0000006E 4834            LDR              R0, =head
  122 00000070 6800            LDR              R0,[R0]     ;R0 = head
  123 00000072 4934            LDR              R1, =NodePt ;R1 = ADDR of NodeP
                                                            t
  124 00000074 6008            STR              R0,[R1]     ;NodePt = head
  125 00000076 6842            LDR              R2,[R0,#4]  ;R2 = head->Thread
  126 00000078 4933            LDR              R1, =RunPt  ;R1 = ADDR of RunPt
                                                            
  127 0000007A 600A            STR              R2,[R1]     ;RunPt = head->Thre
                                                            ad
  128 0000007C         
  129 0000007C E006            B                sh_CheckHead
  130 0000007E         
  131 0000007E         sh_SleepCheckLoop
  132 0000007E 4832            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, current thread
  133 00000080 4930            LDR              R1, =NodePt
  134 00000082 680A            LDR              R2, [R1]    ; R2=NodePt
  135 00000084 6812            LDR              R2, [R2]    ; R2=NodePt->Next
  136 00000086         
  137 00000086 600A            STR              R2, [R1]    ; NodePt = NodePt->
                                                            Next;
  138 00000088 6853            LDR              R3, [R2,#4] ; R3= NodePt->Next-
                                                            >Thread;// which th
                                                            read
  139 0000008A 6003            STR              R3, [R0]    ; RunPt = NodePt->N
                                                            ext->ThreadPt
  140 0000008C         
  141 0000008C B500    sh_CheckHead
                               PUSH{LR}                     ;save LR
  142 0000008E 482D            LDR              R0, =NodePt
  143 00000090 6800            LDR              R0,[R0]
  144 00000092 F7FF FFFE       BL               OS_SleepCheck ;Check if sleep >
                                                             OS_Time
  145 00000096 F85D EB04       POP{LR}
  146 0000009A 3000            ADDS             R0,#0       ; -1 still sleeping
                                                            
  147 0000009C         
  148 0000009C D4EF            BMI              sh_SleepCheckLoop ;  Negative =
                                                             still sleeping or 
                                                            blocked so load nex
                                                            t TCB
  149 0000009E D004            BEQ              sh_SkipSleepClear ;  0: OS Slee
                                                            p was 0, skip updat
                                                            ing the sleep



ARM Macro Assembler    Page 5 


  150 000000A0 B500            PUSH{LR}
  151 000000A2 4828            LDR              R0, =NodePt
  152 000000A4 6800            LDR              R0,[R0]
  153 000000A6         ;BL  OS_SleepClear  ; Set NodePt->Sleep to 0, it is awak
                       e
  154 000000A6 F85D EB04       POP{LR}
  155 000000AA         
  156 000000AA         sh_SkipSleepClear
  157 000000AA         
  158 000000AA         
  159 000000AA         ;3) clear SYSTICK CURRENT
  160 000000AA         ; LDR  R2, [R1]     ;
  161 000000AA         ;    LDR     R2, [R2,#8]     ; NodePt->TimeSlice
  162 000000AA         ;    SUB     R2, #50            ; subtract off time to r
                       un this ISR
  163 000000AA         ;    LDR     R1, =NVIC_ST_RELOAD
  164 000000AA         ; STR     R2, [R1]           ; how long to run next thre
                       ad
  165 000000AA 4928            LDR              R1, =NVIC_ST_CURRENT
  166 000000AC F04F 0214       MOV              R2, #20
  167 000000B0 600A            STR              R2, [R1]    ; write to current,
                                                             clears it
  168 000000B2         
  169 000000B2         ;4) load context of next thread
  170 000000B2 4925            LDR              R1, =RunPt
  171 000000B4 680B            LDR              R3, [R1]    ; R3 = RunPt Val
  172 000000B6 F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  173 000000BA         
  174 000000BA         
  175 000000BA         ;testmain7 PF1
  176 000000BA         ;LDR  R0, =PF1
  177 000000BA         ;MOV  R1, #0
  178 000000BA         ;STR  R1,[R0]
  179 000000BA         
  180 000000BA E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  181 000000BE         
  182 000000BE B662            CPSIE            I           ; tasks run with I=
                                                            0
  183 000000C0 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  184 000000C2         
  185 000000C2         
  186 000000C2         
  187 000000C2         
  188 000000C2         
  189 000000C2         
  190 000000C2         
  191 000000C2         PendSV_Handler
  192 000000C2 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  193 000000C4         
  194 000000C4         
  195 000000C4         ;1) check marked for deletion
  196 000000C4 4820            LDR              R0, =RunPt



ARM Macro Assembler    Page 6 


  197 000000C6 6801            LDR              R1, [R0]    ;Run Pt val
  198 000000C8 684A            LDR              R2, [R1,#4] ;RunPt->kill
  199 000000CA 3200            ADDS             R2, #0      ;set cc
  200 000000CC D00E            BEQ              psv_SaveContext ;0: alive, 1: d
                                                            elete
  201 000000CE         
  202 000000CE         ;1) delete thread, do not save context
  203 000000CE         psv_DeleteLoop
  204 000000CE B500            PUSH             {LR}
  205 000000D0 F7FF FFFE       BL               OS_RemoveCurrentThread ;NodePt 
                                                            = NodePt->Prev
  206 000000D4 F85D EB04       POP              {LR}
  207 000000D8 481B            LDR              R0, =RunPt  ;RuntPt = RunPt->Pr
                                                            ev
  208 000000DA 6800            LDR              R0, [R0]    ;Old thread was fre
                                                            ed
  209 000000DC F8D0 D000       LDR              SP, [R0]    ;Update Stack Point
                                                            er to RunPt->Prev->
                                                            SP
  210 000000E0         
  211 000000E0         ;1) check marked for deletion again
  212 000000E0 4819            LDR              R0, =RunPt
  213 000000E2 6801            LDR              R1, [R0]    ;Run Pt val
  214 000000E4 684A            LDR              R2, [R1,#4] ;RunPt->kill
  215 000000E6 3200            ADDS             R2, #0      ;set cc
  216 000000E8         
  217 000000E8 D006            BEQ              psv_SleepCheckLoop ;0: alive, 1
                                                            : delete.
  218 000000EA E7F0            B                psv_DeleteLoop ;kill = 1,  Loop
                                                             again, needs delet
                                                            ion
  219 000000EC         
  220 000000EC         
  221 000000EC         ;1) alive thread, save context
  222 000000EC         psv_SaveContext
  223 000000EC E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11
  224 000000F0 4815            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
  225 000000F2 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
  226 000000F4 F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
  227 000000F8         
  228 000000F8         ;psv_NoSaveContext
  229 000000F8         ;2) Find the Next Thread that is not sleeping
  230 000000F8         psv_SleepCheckLoop
  231 000000F8 4813            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, current thread
  232 000000FA 4912            LDR              R1, =NodePt
  233 000000FC 680A            LDR              R2, [R1]    ; R2=NodePt
  234 000000FE 6812            LDR              R2, [R2]    ; R2=NodePt->Next
  235 00000100         
  236 00000100 600A            STR              R2, [R1]    ; NodePt = NodePt->
                                                            Next;
  237 00000102 6853            LDR              R3, [R2,#4] ; R3= NodePt->Next-
                                                            >Thread;// which th
                                                            read



ARM Macro Assembler    Page 7 


  238 00000104 6003            STR              R3, [R0]    ; RunPt = NodePt->N
                                                            ext->ThreadPt
  239 00000106         
  240 00000106 B500            PUSH{LR}                     ;save LR
  241 00000108 480E            LDR              R0, =NodePt
  242 0000010A 6800            LDR              R0,[R0]
  243 0000010C F7FF FFFE       BL               OS_SleepCheck ;Check if sleep >
                                                             OS_Time
  244 00000110 F85D EB04       POP{LR}
  245 00000114 3000            ADDS             R0,#0       ; -1 still sleeping
                                                            
  246 00000116         
  247 00000116 D4EF            BMI              psv_SleepCheckLoop ;  Negative 
                                                            = still sleeping so
                                                             load next TCB
  248 00000118 D004            BEQ              psv_SkipSleepClear ;  0: OS Sle
                                                            ep was 0, skip upda
                                                            ting the sleep
  249 0000011A B500            PUSH{LR}
  250 0000011C 4809            LDR              R0, =NodePt
  251 0000011E 6800            LDR              R0,[R0]
  252 00000120         ; BL  OS_SleepClear  ; Set NodePt->Sleep to 0, it is awa
                       ke
  253 00000120 F85D EB04       POP{LR}
  254 00000124         
  255 00000124         psv_SkipSleepClear
  256 00000124         ;3) clear SYSTICK CURRENT
  257 00000124         ; LDR  R2, [R1]     ;
  258 00000124         ;    LDR     R2, [R2,#8]     ; NodePt->TimeSlice
  259 00000124         ;    SUB     R2, #50            ; subtract off time to r
                       un this ISR
  260 00000124         ;    LDR     R1, =NVIC_ST_RELOAD
  261 00000124         ; STR     R2, [R1]           ; how long to run next thre
                       ad
  262 00000124 4909            LDR              R1, =NVIC_ST_CURRENT
  263 00000126 F04F 0214       MOV              R2, #20
  264 0000012A 600A            STR              R2, [R1]    ; write to current,
                                                             clears it
  265 0000012C         
  266 0000012C         ;4) load context of next thread
  267 0000012C 4906            LDR              R1, =RunPt
  268 0000012E 680B            LDR              R3, [R1]    ; R3 = RunPt Val
  269 00000130 F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  270 00000134         
  271 00000134 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  272 00000138         
  273 00000138 B662            CPSIE            I           ; tasks run with I=
                                                            0
  274 0000013A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  275 0000013C         
  276 0000013C         
  277 0000013C         
  278 0000013C         
  279 0000013C                 ALIGN



ARM Macro Assembler    Page 8 


  280 0000013C                 END
              E000E014 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file osasm.s
   Uses
      None
Comment: .text unused
OSStartHang 00000036

Symbol: OSStartHang
   Definitions
      At line 66 in file osasm.s
   Uses
      At line 67 in file osasm.s
Comment: OSStartHang used once
OS_Launch 00000002

Symbol: OS_Launch
   Definitions
      At line 44 in file osasm.s
   Uses
      At line 24 in file osasm.s
Comment: OS_Launch used once
PendSV_Handler 000000C2

Symbol: PendSV_Handler
   Definitions
      At line 191 in file osasm.s
   Uses
      At line 26 in file osasm.s
Comment: PendSV_Handler used once
SysTick_Handler 00000038

Symbol: SysTick_Handler
   Definitions
      At line 74 in file osasm.s
   Uses
      At line 25 in file osasm.s
Comment: SysTick_Handler used once
psv_DeleteLoop 000000CE

Symbol: psv_DeleteLoop
   Definitions
      At line 203 in file osasm.s
   Uses
      At line 218 in file osasm.s
Comment: psv_DeleteLoop used once
psv_SaveContext 000000EC

Symbol: psv_SaveContext
   Definitions
      At line 222 in file osasm.s
   Uses
      At line 200 in file osasm.s
Comment: psv_SaveContext used once
psv_SkipSleepClear 00000124

Symbol: psv_SkipSleepClear



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 255 in file osasm.s
   Uses
      At line 248 in file osasm.s
Comment: psv_SkipSleepClear used once
psv_SleepCheckLoop 000000F8

Symbol: psv_SleepCheckLoop
   Definitions
      At line 230 in file osasm.s
   Uses
      At line 217 in file osasm.s
      At line 247 in file osasm.s

sh_CheckHead 0000008C

Symbol: sh_CheckHead
   Definitions
      At line 141 in file osasm.s
   Uses
      At line 129 in file osasm.s
Comment: sh_CheckHead used once
sh_DeleteLoop 00000044

Symbol: sh_DeleteLoop
   Definitions
      At line 93 in file osasm.s
   Uses
      At line 108 in file osasm.s
Comment: sh_DeleteLoop used once
sh_SaveContext 00000062

Symbol: sh_SaveContext
   Definitions
      At line 112 in file osasm.s
   Uses
      At line 90 in file osasm.s
Comment: sh_SaveContext used once
sh_SkipSleepClear 000000AA

Symbol: sh_SkipSleepClear
   Definitions
      At line 156 in file osasm.s
   Uses
      At line 149 in file osasm.s
Comment: sh_SkipSleepClear used once
sh_SleepCheckLoop 0000007E

Symbol: sh_SleepCheckLoop
   Definitions
      At line 131 in file osasm.s
   Uses
      At line 107 in file osasm.s
      At line 148 in file osasm.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 31 in file osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 34 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 35 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 36 in file osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_ST_CURRENT E000E018

Symbol: NVIC_ST_CURRENT
   Definitions
      At line 38 in file osasm.s
   Uses
      At line 165 in file osasm.s
      At line 262 in file osasm.s

NVIC_ST_RELOAD E000E014

Symbol: NVIC_ST_RELOAD
   Definitions
      At line 37 in file osasm.s
   Uses
      At line 45 in file osasm.s
Comment: NVIC_ST_RELOAD used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 32 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: NVIC_SYSPRI15
   Definitions
      At line 33 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
PF1 40025008

Symbol: PF1
   Definitions
      At line 40 in file osasm.s
   Uses
      None
Comment: PF1 unused
TIMER0_ICR_R 40030024

Symbol: TIMER0_ICR_R
   Definitions
      At line 29 in file osasm.s
   Uses
      None
Comment: TIMER0_ICR_R unused
TIMER_ICR_TATOCINT 00000001

Symbol: TIMER_ICR_TATOCINT
   Definitions
      At line 30 in file osasm.s
   Uses
      None
Comment: TIMER_ICR_TATOCINT unused
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NodePt 00000000

Symbol: NodePt
   Definitions
      At line 14 in file osasm.s
   Uses
      At line 50 in file osasm.s
      At line 123 in file osasm.s
      At line 133 in file osasm.s
      At line 142 in file osasm.s
      At line 151 in file osasm.s
      At line 232 in file osasm.s
      At line 241 in file osasm.s
      At line 250 in file osasm.s

OS_RemoveCurrentThread 00000000

Symbol: OS_RemoveCurrentThread
   Definitions
      At line 19 in file osasm.s
   Uses
      At line 95 in file osasm.s
      At line 205 in file osasm.s

OS_SleepCheck 00000000

Symbol: OS_SleepCheck
   Definitions
      At line 17 in file osasm.s
   Uses
      At line 144 in file osasm.s
      At line 243 in file osasm.s

OS_SleepClear 00000000

Symbol: OS_SleepClear
   Definitions
      At line 18 in file osasm.s
   Uses
      None
Comment: OS_SleepClear unused
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file osasm.s
   Uses
      At line 53 in file osasm.s
      At line 86 in file osasm.s
      At line 97 in file osasm.s
      At line 102 in file osasm.s
      At line 114 in file osasm.s
      At line 126 in file osasm.s
      At line 132 in file osasm.s
      At line 170 in file osasm.s
      At line 196 in file osasm.s
      At line 207 in file osasm.s
      At line 212 in file osasm.s
      At line 224 in file osasm.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 231 in file osasm.s
      At line 267 in file osasm.s

head 00000000

Symbol: head
   Definitions
      At line 15 in file osasm.s
   Uses
      At line 48 in file osasm.s
      At line 121 in file osasm.s

6 symbols
364 symbols in table
