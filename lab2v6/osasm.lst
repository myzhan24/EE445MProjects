


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, Fixed Scheduler, 8/10/14
    6 00000000         
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NodePt      ; linked list of tr
                                                            eads to run
   15 00000000                 EXTERN           OS_SleepCheck ;
   16 00000000                 EXTERN           OS_SleepClear
   17 00000000         ;EXTERN killSwitch  ; PendSV skip saving the conteext?
   18 00000000         ;EXTERN  SNodePt
   19 00000000         ;EXTERN PeriodicNode
   20 00000000         ;EXTERN  sys
   21 00000000                 EXPORT           OS_Launch
   22 00000000                 EXPORT           SysTick_Handler
   23 00000000                 EXPORT           PendSV_Handler
   24 00000000         ;EXPORT  Timer0A_Handler
   25 00000000         
   26 00000000 40030024 
                       TIMER0_ICR_R
                               EQU              0x40030024
   27 00000000 00000001 
                       TIMER_ICR_TATOCINT
                               EQU              0x00000001  ; GPTM TimerA Time-
                                                            Out Raw
   28 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   29 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   30 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   31 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   32 00000000 000000FF 



ARM Macro Assembler    Page 2 


                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   33 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   34 00000000 E000E014 
                       NVIC_ST_RELOAD
                               EQU              0xE000E014
   35 00000000 E000E018 
                       NVIC_ST_CURRENT
                               EQU              0xE000E018
   36 00000000         
   37 00000000         
   38 00000000 4770            BX               LR          ; yes – we successf
                                                            ully incremented it
                                                            
   39 00000002         
   40 00000002         
   41 00000002         OS_Launch
   42 00000002 482D            LDR              R0, =RunPt  ; currently running
                                                             thread
   43 00000004 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   44 00000006 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   45 0000000A E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   46 0000000E BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                             
   47 00000010 F85D CB04       POP              {R12}
   48 00000014 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   49 00000018 F85D EB04       POP              {LR}        ; start location
   50 0000001C BC02            POP              {R1}        ; discard PSR
   51 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   52 00000020 4770            BX               LR          ; start first threa
                                                            d
   53 00000022         
   54 00000022         OSStartHang
   55 00000022 E7FE            B                OSStartHang ; Should never get 
                                                            here
   56 00000024         
   57 00000024         
   58 00000024         
   59 00000024         ;*******************************************************
                       *************************************************
   60 00000024         
   61 00000024         
   62 00000024         SysTick_Handler
   63 00000024 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   64 00000026 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11



ARM Macro Assembler    Page 3 


   65 0000002A 4823            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   66 0000002C 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
   67 0000002E F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
   68 00000032         
   69 00000032         ;context saved
   70 00000032         ;check the sleep
   71 00000032         
   72 00000032         SleepCheck
   73 00000032 4821            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   74 00000034 4921            LDR              R1, =NodePt
   75 00000036 680A            LDR              R2, [R1]    ; NodePt
   76 00000038 6812            LDR              R2, [R2]    ; next to run
   77 0000003A         
   78 0000003A 600A            STR              R2, [R1]    ; NodePt= NodePt->N
                                                            ext;
   79 0000003C 6853            LDR              R3, [R2,#4] ; RunPt = &sys[Node
                                                            Pt->Thread];// whic
                                                            h thread
   80 0000003E 6003            STR              R3, [R0]
   81 00000040         
   82 00000040 B500            PUSH{LR}
   83 00000042 F7FF FFFE       BL               OS_SleepCheck
   84 00000046 F85D EB04       POP{LR}
   85 0000004A 3000            ADDS             R0,#0       ; -1 still sleeping
                                                            
   86 0000004C         
   87 0000004C D4F1            BMI              SleepCheck  ;  Negative still s
                                                            leeping
   88 0000004E D004            BEQ              SkipSleepClear ;  0: OS Sleep w
                                                            as 0, skip updating
                                                             the sleep
   89 00000050 B500            PUSH{LR}
   90 00000052 F7FF FFFE       BL               OS_SleepClear
   91 00000056 F85D EB04       POP{LR}
   92 0000005A         
   93 0000005A         SkipSleepClear
   94 0000005A         ; reload SYStiCK Reload time
   95 0000005A 680A            LDR              R2, [R1]    ;
   96 0000005C 6892            LDR              R2, [R2,#8] ; NodePt->TimeSlice
                                                            
   97 0000005E F1A2 0232       SUB              R2, #50     ; subtract off time
                                                             to run this ISR
   98 00000062 4917            LDR              R1, =NVIC_ST_RELOAD
   99 00000064         ; STR     R2, [R1]           ; how long to run next thre
                       ad
  100 00000064 4917            LDR              R1, =NVIC_ST_CURRENT
  101 00000066 600A            STR              R2, [R1]    ; write to current,
                                                             clears it
  102 00000068         
  103 00000068 4913            LDR              R1, =RunPt
  104 0000006A 680B            LDR              R3, [R1]    ; R2 = RunPt
  105 0000006C         ;LDR     R3, [R2]        ;  R3 = RunPt->StackPt
  106 0000006C F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin



ARM Macro Assembler    Page 4 


                                                            ter;
  107 00000070         
  108 00000070         
  109 00000070 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  110 00000074         
  111 00000074 B662            CPSIE            I           ; tasks run with I=
                                                            0
  112 00000076 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  113 00000078         
  114 00000078         
  115 00000078         
  116 00000078         SleepUpdate
  117 00000078         ;updates each sleep number until r2 = r1 NodePt Addr
  118 00000078 4810            LDR              R0, =NodePt
  119 0000007A 6800            LDR              R0, [R0]    ; R0 = NodePt
  120 0000007C 6800            LDR              R0, [R0]    ; R0 = NodePt->Next
                                                            
  121 0000007E F100 0100       ADD              R1, R0, #0  ; R1 = (NodePt->Nex
                                                            t)->()->
  122 00000082         
  123 00000082         SleepUpdateLoop
  124 00000082 68CB            LDR              R3, [R1,#12] ; R3 = NodePt->Sle
                                                            ep
  125 00000084 3B01            SUBS             R3, #1      ; subtract from the
                                                             TimeSlice
  126 00000086 D400            BMI              Awake       ; Negative Number m
                                                            eans the sleep was 
                                                            at 0, and was not s
                                                            leeping
  127 00000088 60CB            STR              R3, [R1,#12] ; Sleeping so stor
                                                            e the sleep back in
                                                             the memory locatio
                                                            n
  128 0000008A         
  129 0000008A         Awake
  130 0000008A 6809            LDR              R1, [R1]    ; R1 = NodePt->Next
                                                            
  131 0000008C 4281            CMP              R1, R0      ; Did we make a ful
                                                            l loop around the T
                                                            CBs?
  132 0000008E D1F8            BNE              SleepUpdateLoop ; not same, con
                                                            tinue
  133 00000090 E7CF            B                SleepCheck
  134 00000092         
  135 00000092         PendSV_Handler
  136 00000092 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  137 00000094 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
  138 00000098 4807            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
  139 0000009A 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
  140 0000009C F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou



ARM Macro Assembler    Page 5 


                                                            t
  141 000000A0         ;LDR     R1, =sys           ; each sys[] is 400 bytes
  142 000000A0         ;ADD     R1,#3*400          ; pointer to sys[3] = ThePan
                        (background task)
  143 000000A0         
  144 000000A0         ;switch RunPt = NodePt->next->ThreadPt
  145 000000A0 4906            LDR              R1, =NodePt ;R1 = nodePt addr
  146 000000A2 680A            LDR              R2, [R1]    ;R2 = NodePt val
  147 000000A4 6812            LDR              R2, [R2]    ;R3 = NodePt->next
  148 000000A6 6853            LDR              R3, [R2,#4] ;R1 = NodePt->next-
                                                            >ThreadPt
  149 000000A8 6003            STR              R3, [R0]    ; RunPt = NodePt->n
                                                            ext->ThreadPt
  150 000000AA         
  151 000000AA         ;switch the NodePt= NodePt->next
  152 000000AA 600A            STR              R2, [R1]
  153 000000AC         
  154 000000AC         
  155 000000AC F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
  156 000000B0 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  157 000000B4         
  158 000000B4 B662            CPSIE            I           ; tasks run with I=
                                                            0
  159 000000B6 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  160 000000B8         
  161 000000B8                 ALIGN
  162 000000B8                 END
              00000000 
              00000000 
              E000E014 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file osasm.s
   Uses
      None
Comment: .text unused
Awake 0000008A

Symbol: Awake
   Definitions
      At line 129 in file osasm.s
   Uses
      At line 126 in file osasm.s
Comment: Awake used once
OSStartHang 00000022

Symbol: OSStartHang
   Definitions
      At line 54 in file osasm.s
   Uses
      At line 55 in file osasm.s
Comment: OSStartHang used once
OS_Launch 00000002

Symbol: OS_Launch
   Definitions
      At line 41 in file osasm.s
   Uses
      At line 21 in file osasm.s
Comment: OS_Launch used once
PendSV_Handler 00000092

Symbol: PendSV_Handler
   Definitions
      At line 135 in file osasm.s
   Uses
      At line 23 in file osasm.s
Comment: PendSV_Handler used once
SkipSleepClear 0000005A

Symbol: SkipSleepClear
   Definitions
      At line 93 in file osasm.s
   Uses
      At line 88 in file osasm.s
Comment: SkipSleepClear used once
SleepCheck 00000032

Symbol: SleepCheck
   Definitions
      At line 72 in file osasm.s
   Uses
      At line 87 in file osasm.s
      At line 133 in file osasm.s

SleepUpdate 00000078




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: SleepUpdate
   Definitions
      At line 116 in file osasm.s
   Uses
      None
Comment: SleepUpdate unused
SleepUpdateLoop 00000082

Symbol: SleepUpdateLoop
   Definitions
      At line 123 in file osasm.s
   Uses
      At line 132 in file osasm.s
Comment: SleepUpdateLoop used once
SysTick_Handler 00000024

Symbol: SysTick_Handler
   Definitions
      At line 62 in file osasm.s
   Uses
      At line 22 in file osasm.s
Comment: SysTick_Handler used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 28 in file osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 31 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 32 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 33 in file osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_ST_CURRENT E000E018

Symbol: NVIC_ST_CURRENT
   Definitions
      At line 35 in file osasm.s
   Uses
      At line 100 in file osasm.s
Comment: NVIC_ST_CURRENT used once
NVIC_ST_RELOAD E000E014

Symbol: NVIC_ST_RELOAD
   Definitions
      At line 34 in file osasm.s
   Uses
      At line 98 in file osasm.s
Comment: NVIC_ST_RELOAD used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 29 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 30 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
TIMER0_ICR_R 40030024

Symbol: TIMER0_ICR_R
   Definitions
      At line 26 in file osasm.s
   Uses
      None
Comment: TIMER0_ICR_R unused
TIMER_ICR_TATOCINT 00000001

Symbol: TIMER_ICR_TATOCINT
   Definitions
      At line 27 in file osasm.s
   Uses
      None
Comment: TIMER_ICR_TATOCINT unused
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NodePt 00000000

Symbol: NodePt
   Definitions
      At line 14 in file osasm.s
   Uses
      At line 74 in file osasm.s
      At line 118 in file osasm.s
      At line 145 in file osasm.s

OS_SleepCheck 00000000

Symbol: OS_SleepCheck
   Definitions
      At line 15 in file osasm.s
   Uses
      At line 83 in file osasm.s
Comment: OS_SleepCheck used once
OS_SleepClear 00000000

Symbol: OS_SleepClear
   Definitions
      At line 16 in file osasm.s
   Uses
      At line 90 in file osasm.s
Comment: OS_SleepClear used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file osasm.s
   Uses
      At line 42 in file osasm.s
      At line 65 in file osasm.s
      At line 73 in file osasm.s
      At line 103 in file osasm.s
      At line 138 in file osasm.s

4 symbols
357 symbols in table
