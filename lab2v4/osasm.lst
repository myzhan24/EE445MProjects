


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, Fixed Scheduler, 8/10/14
    6 00000000         
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NodePt      ; linked list of tr
                                                            eads to run
   15 00000000         ;EXTERN  sys
   16 00000000                 EXPORT           OS_Launch
   17 00000000                 EXPORT           SysTick_Handler
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000         
   20 00000000         
   21 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   22 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   23 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   24 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   25 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   26 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   27 00000000 E000E014 
                       NVIC_ST_RELOAD
                               EQU              0xE000E014
   28 00000000 E000E018 
                       NVIC_ST_CURRENT



ARM Macro Assembler    Page 2 


                               EQU              0xE000E018
   29 00000000         
   30 00000000         
   31 00000000 4770            BX               LR          ; yes – we successf
                                                            ully incremented it
                                                            
   32 00000002         
   33 00000002         
   34 00000002         OS_Launch
   35 00000002 481F            LDR              R0, =RunPt  ; currently running
                                                             thread
   36 00000004 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   37 00000006 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   38 0000000A E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   39 0000000E BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                             
   40 00000010 F85D CB04       POP              {R12}
   41 00000014 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   42 00000018 F85D EB04       POP              {LR}        ; start location
   43 0000001C BC02            POP              {R1}        ; discard PSR
   44 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   45 00000020 4770            BX               LR          ; start first threa
                                                            d
   46 00000022         
   47 00000022         OSStartHang
   48 00000022 E7FE            B                OSStartHang ; Should never get 
                                                            here
   49 00000024         
   50 00000024         
   51 00000024         
   52 00000024         ;*******************************************************
                       *************************************************
   53 00000024         
   54 00000024         SysTick_Handler
   55 00000024 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   56 00000026 E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
   57 0000002A 4815            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   58 0000002C 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
   59 0000002E F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
   60 00000032 4914            LDR              R1, =NodePt
   61 00000034 680A            LDR              R2, [R1]    ; NodePt
   62 00000036 6812            LDR              R2, [R2]    ; next to run
   63 00000038 600A            STR              R2, [R1]    ; NodePt= NodePt->N
                                                            ext;
   64 0000003A 6853            LDR              R3, [R2,#4] ; RunPt = &sys[Node



ARM Macro Assembler    Page 3 


                                                            Pt->Thread];// whic
                                                            h thread
   65 0000003C 6003            STR              R3, [R0]
   66 0000003E         
   67 0000003E 6892            LDR              R2, [R2,#8] ; NodePt->TimeSlice
                                                            
   68 00000040 F1A2 0232       SUB              R2, #50     ; subtract off time
                                                             to run this ISR
   69 00000044 4910            LDR              R1, =NVIC_ST_RELOAD
   70 00000046 600A            STR              R2, [R1]    ; how long to run n
                                                            ext thread
   71 00000048 4910            LDR              R1, =NVIC_ST_CURRENT
   72 0000004A 600A            STR              R2, [R1]    ; write to current,
                                                             clears it
   73 0000004C         
   74 0000004C F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   75 00000050 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
   76 00000054         
   77 00000054 B662            CPSIE            I           ; tasks run with I=
                                                            0
   78 00000056 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
   79 00000058         
   80 00000058         PendSV_Handler
   81 00000058 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
   82 0000005A E92D 0FF0       PUSH             {R4-R11}    ; Save remaining re
                                                            gs r4-11 
   83 0000005E 4808            LDR              R0, =RunPt  ; R0=pointer to Run
                                                            Pt, old thread
   84 00000060 6801            LDR              R1, [R0]    ; RunPt->stackPoint
                                                            er = SP;
   85 00000062 F8C1 D000       STR              SP, [R1]    ; save SP of proces
                                                            s being switched ou
                                                            t
   86 00000066         ;LDR     R1, =sys           ; each sys[] is 400 bytes
   87 00000066         ;ADD     R1,#3*400          ; pointer to sys[3] = ThePan
                        (background task)
   88 00000066         
   89 00000066         ;switch RunPt = NodePt->next->ThreadPt
   90 00000066 4907            LDR              R1, =NodePt ;R1 = nodePt addr
   91 00000068 680A            LDR              R2, [R1]    ;R2 = NodePt val
   92 0000006A 6812            LDR              R2, [R2]    ;R3 = NodePt->next
   93 0000006C 6853            LDR              R3, [R2,#4] ;R1 = NodePt->next-
                                                            >ThreadPt
   94 0000006E 6003            STR              R3, [R0]    ; RunPt = NodePt->n
                                                            ext->ThreadPt
   95 00000070         
   96 00000070         ;switch the NodePt= NodePt->next
   97 00000070 600A            STR              R2, [R1]
   98 00000072         
   99 00000072         
  100 00000072 F8D3 D000       LDR              SP, [R3]    ; new thread SP; SP
                                                             = RunPt->stackPoin



ARM Macro Assembler    Page 4 


                                                            ter;
  101 00000076 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1 
  102 0000007A         
  103 0000007A B662            CPSIE            I           ; tasks run with I=
                                                            0
  104 0000007C 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  105 0000007E         
  106 0000007E 00 00           ALIGN
  107 00000080                 END
              00000000 
              00000000 
              E000E014 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file osasm.s
   Uses
      None
Comment: .text unused
OSStartHang 00000022

Symbol: OSStartHang
   Definitions
      At line 47 in file osasm.s
   Uses
      At line 48 in file osasm.s
Comment: OSStartHang used once
OS_Launch 00000002

Symbol: OS_Launch
   Definitions
      At line 34 in file osasm.s
   Uses
      At line 16 in file osasm.s
Comment: OS_Launch used once
PendSV_Handler 00000058

Symbol: PendSV_Handler
   Definitions
      At line 80 in file osasm.s
   Uses
      At line 18 in file osasm.s
Comment: PendSV_Handler used once
SysTick_Handler 00000024

Symbol: SysTick_Handler
   Definitions
      At line 54 in file osasm.s
   Uses
      At line 17 in file osasm.s
Comment: SysTick_Handler used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 21 in file osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 24 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 25 in file osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 26 in file osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_ST_CURRENT E000E018

Symbol: NVIC_ST_CURRENT
   Definitions
      At line 28 in file osasm.s
   Uses
      At line 71 in file osasm.s
Comment: NVIC_ST_CURRENT used once
NVIC_ST_RELOAD E000E014

Symbol: NVIC_ST_RELOAD
   Definitions
      At line 27 in file osasm.s
   Uses
      At line 69 in file osasm.s
Comment: NVIC_ST_RELOAD used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 22 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 23 in file osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NodePt 00000000

Symbol: NodePt
   Definitions
      At line 14 in file osasm.s
   Uses
      At line 60 in file osasm.s
      At line 90 in file osasm.s

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file osasm.s
   Uses
      At line 35 in file osasm.s
      At line 57 in file osasm.s
      At line 83 in file osasm.s

2 symbols
348 symbols in table
